//=================================
// Reed-Solomon library unit tests
//=================================

// Get Boost.test libraries
#define BOOST_TEST_MODULE test_reed_solomon
#include <boost/test/included/unit_test.hpp>

#include "reed-solomon.h"

#include <cmath>


BOOST_AUTO_TEST_CASE( primes ) {
    rs_int exponent = 8;
    unsigned degree = 5;
    rs_int real_exp[] = {1, 2, 4, 8, 16, 32, 64, 128, 141, 151, 163, 203, 27, 54, 108, 216, 61, 122, 244, 101, 202, 25, 50, 100, 200, 29, 58, 116, 232, 93, 186, 249, 127, 254, 113, 226, 73, 146, 169, 223, 51, 102, 204, 21, 42, 84, 168, 221, 55, 110, 220, 53, 106, 212, 37, 74, 148, 165, 199, 3, 6, 12, 24, 48, 96, 192, 13, 26, 52, 104, 208, 45, 90, 180, 229, 71, 142, 145, 175, 211, 43, 86, 172, 213, 39, 78, 156, 181, 231, 67, 134, 129, 143, 147, 171, 219, 59, 118, 236, 85, 170, 217, 63, 126, 252, 117, 234, 89, 178, 233, 95, 190, 241, 111, 222, 49, 98, 196, 5, 10, 20, 40, 80, 160, 205, 23, 46, 92, 184, 253, 119, 238, 81, 162, 201, 31, 62, 124, 248, 125, 250, 121, 242, 105, 210, 41, 82, 164, 197, 7, 14, 28, 56, 112, 224, 77, 154, 185, 255, 115, 230, 65, 130, 137, 159, 179, 235, 91, 182, 225, 79, 158, 177, 239, 83, 166, 193, 15, 30, 60, 120, 240, 109, 218, 57, 114, 228, 69, 138, 153, 191, 243, 107, 214, 33, 66, 132, 133, 135, 131, 139, 155, 187, 251, 123, 246, 97, 194, 9, 18, 36, 72, 144, 173, 215, 35, 70, 140, 149, 167, 195, 11, 22, 44, 88, 176, 237, 87, 174, 209, 47, 94, 188, 245, 103, 206, 17, 34, 68, 136, 157, 183, 227, 75, 150, 161, 207, 19, 38, 76, 152, 189, 247, 99, 198, 1, 2, 4, 8, 16, 32, 64, 128, 141, 151, 163, 203, 27, 54, 108, 216, 61, 122, 244, 101, 202, 25, 50, 100, 200, 29, 58, 116, 232, 93, 186, 249, 127, 254, 113, 226, 73, 146, 169, 223, 51, 102, 204, 21, 42, 84, 168, 221, 55, 110, 220, 53, 106, 212, 37, 74, 148, 165, 199, 3, 6, 12, 24, 48, 96, 192, 13, 26, 52, 104, 208, 45, 90, 180, 229, 71, 142, 145, 175, 211, 43, 86, 172, 213, 39, 78, 156, 181, 231, 67, 134, 129, 143, 147, 171, 219, 59, 118, 236, 85, 170, 217, 63, 126, 252, 117, 234, 89, 178, 233, 95, 190, 241, 111, 222, 49, 98, 196, 5, 10, 20, 40, 80, 160, 205, 23, 46, 92, 184, 253, 119, 238, 81, 162, 201, 31, 62, 124, 248, 125, 250, 121, 242, 105, 210, 41, 82, 164, 197, 7, 14, 28, 56, 112, 224, 77, 154, 185, 255, 115, 230, 65, 130, 137, 159, 179, 235, 91, 182, 225, 79, 158, 177, 239, 83, 166, 193, 15, 30, 60, 120, 240, 109, 218, 57, 114, 228, 69, 138, 153, 191, 243, 107, 214, 33, 66, 132, 133, 135, 131, 139, 155, 187, 251, 123, 246, 97, 194, 9, 18, 36, 72, 144, 173, 215, 35, 70, 140, 149, 167, 195, 11, 22, 44, 88, 176, 237, 87, 174, 209, 47, 94, 188, 245, 103, 206, 17, 34, 68, 136, 157, 183, 227, 75, 150, 161, 207, 19, 38, 76, 152, 189, 247, 99, 198};
    rs_int real_log[] = {0, 0, 1, 59, 2, 118, 60, 149, 3, 208, 119, 221, 61, 66, 150, 177, 4, 236, 209, 247, 120, 43, 222, 125, 62, 21, 67, 12, 151, 25, 178, 135, 5, 194, 237, 215, 210, 54, 248, 84, 121, 145, 44, 80, 223, 71, 126, 230, 63, 115, 22, 40, 68, 51, 13, 48, 152, 184, 26, 96, 179, 16, 136, 102, 6, 161, 195, 89, 238, 187, 216, 75, 211, 36, 55, 243, 249, 155, 85, 170, 122, 132, 146, 174, 45, 99, 81, 227, 224, 107, 72, 167, 127, 29, 231, 110, 64, 206, 116, 253, 23, 19, 41, 234, 69, 143, 52, 192, 14, 182, 49, 113, 153, 34, 185, 159, 27, 105, 97, 130, 180, 141, 17, 204, 137, 139, 103, 32, 7, 91, 162, 199, 196, 197, 90, 198, 239, 163, 188, 200, 217, 8, 76, 92, 212, 77, 37, 93, 56, 218, 244, 9, 250, 189, 156, 201, 86, 240, 171, 164, 123, 245, 133, 10, 147, 57, 175, 219, 46, 38, 100, 94, 82, 213, 228, 78, 225, 172, 108, 165, 73, 87, 168, 241, 128, 157, 30, 202, 232, 251, 111, 190, 65, 176, 207, 220, 117, 148, 254, 58, 24, 134, 20, 11, 42, 124, 235, 246, 70, 229, 144, 79, 53, 83, 193, 214, 15, 101, 183, 95, 50, 47, 114, 39, 154, 169, 35, 242, 186, 74, 160, 88, 28, 109, 106, 166, 98, 226, 131, 173, 181, 112, 142, 191, 18, 233, 205, 252, 138, 31, 140, 203, 104, 129, 33, 158};
    reed_solomon_encoder rs(exponent, degree);
    BOOST_CHECK_EQUAL(rs.field_characteristic, 255ul);
    for (unsigned long i = 0; i < rs.field_characteristic * 2ul; i++)
        BOOST_CHECK_EQUAL(rs.gf_exp[i], real_exp[i]);
    for (unsigned long i = 0; i < rs.field_characteristic + 1ul; i++)
        BOOST_CHECK_EQUAL(rs.gf_log[i], real_log[i]);
}


BOOST_AUTO_TEST_CASE( syndromes ) {
    unsigned long n = 12;
    rs_int exponent = std::ceil(std::log2(n + 1));
    unsigned degree = 4;
    unsigned sol[] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0};
    reed_solomon_encoder rs(exponent, degree);
    unsigned *all_syndromes;
    unsigned long size = rs.calculate_all_syndromes(n, all_syndromes);
    for (unsigned long i = 0; i < size; i++){
        for (unsigned long j = 0; j < n; j++) {
            BOOST_CHECK_EQUAL(all_syndromes[i * n + j], sol[i * n + j]);
        }
    }
    delete[] all_syndromes;
}


BOOST_AUTO_TEST_CASE( error_finding ) {
    unsigned long n = 20;
    rs_int exponent = std::ceil(std::log2(n + 1));
    unsigned degree = 4;
    std::vector<unsigned> measurement = {1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1};
    std::vector<unsigned long> sol = {5, 2, 1};
    reed_solomon_encoder rs(exponent, degree);
    std::vector<unsigned long> error_locs;
    rs.find_errors(measurement, n, error_locs);
    BOOST_REQUIRE_EQUAL(error_locs.size(), sol.size());
    for (unsigned i = 0; i < error_locs.size(); i++)
        BOOST_CHECK_EQUAL(error_locs[i], sol[i]);
}
